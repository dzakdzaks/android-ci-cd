name: Android CI

on:
  # Triggers the workflow on push or pull request events but only for default and protected branches
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get Tag
        id: var
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
          java-package: jdk # optional (jdk or jre) - defaults to jdk

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Tests Build
      - name: Run gradle tests
        run: ./gradlew test

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build

      # Create APK Debug
      - name: Build apk debug project (APK)
        id: buildApkDebug
        run: ./gradlew assembleDebug

      # Upload Artifact APK Debug Build
      - name: Make APK Debug artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: app/build/outputs/apk/debug/app-debug.apk

      # APK Debug Firebase Distribution
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.SERVICE_ACCOUNT_FIREBASE }}
          groups: general
          file: app/build/outputs/apk/debug/app-debug.apk

      # Create APK Release
      - name: Build apk release project (APK)
        id: buildApkRelease
        run: ./gradlew assembleRelease

      # Sign APK Release
      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      # Upload Artifact Signed APK Release Build
      - name: Make APK Release artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{steps.sign_apk.outputs.signedReleaseFile}}

      # Signed APK Release Firebase Distribution
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.SERVICE_ACCOUNT_FIREBASE }}
          groups: general
          file: ${{steps.sign_apk.outputs.signedReleaseFile}}

      # Create Bundle AAB Release
      - name: Build app bundle release (AAB)
        run: ./gradlew bundleRelease

      # Sign AAB Release
      - name: Sign AAB
        id: sign_aab
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      # Upload Artifact Signed AAB Release Build
      - name: Make artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{steps.sign_aab.outputs.signedReleaseFile}}

      # Signed AAB Release Firebase Distribution
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.SERVICE_ACCOUNT_FIREBASE }}
          groups: general
          file: ${{steps.sign_aab.outputs.signedReleaseFile}}

      - name: Build Changelog
        id: changelog
        uses: ardalanamini/auto-changelog@v3
        with:
          mention-authors: false
          mention-new-contributors: false
          include-compare: false
          semver: false

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }} &#x20;
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Signed APK Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/debug/app-debug.apk
          asset_name: app-debug-${{ steps.var.outputs.tag }}.apk
          asset_content_type: application/zip

      - name: Upload Signed APK Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_apk.outputs.signedReleaseFile}}
          asset_name: app-release-signed-${{ steps.var.outputs.tag }}.apk
          asset_content_type: application/zip

      - name: Upload Signed AAB Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_aab.outputs.signedReleaseFile}}
          asset_name: app-release-signed-${{ steps.var.outputs.tag }}.aab
          asset_content_type: application/zip


#      # Create a build number based on timestamp / UTC time
#      - name: set release date
#        run: |
#          echo "BUILD_NUMBER=$(date +"%s")" >> ${GITHUB_ENV}
#
#      # Decode the keystore file containing the signing key
#      - name: Decode Keystore
#        id: decode_keystore
#        uses: timheuer/base64-to-file@v1.1
#        with:
#          fileDir: './secrets'
#          fileName: 'release.keystore'
#          encodedString: ${{ secrets.KEYSTORE_FILE }}
#
#      # Decode the Google Play api key file
#      - name: Decode Google Play API key
#        id: decode_api_key
#        uses: timheuer/base64-to-file@v1.1
#        with:
#          fileDir: './secrets'
#          fileName: 'google-play-api-key.json'
#          encodedString: ${{ secrets.GOOGLE_PLAY_API_KEY }}
#
#      # Build bundle and publish to Google Play
#      - name: Build & publish to Google Play
#        run: ./gradlew
#          -PBUILD_NUMBER="${{ env.BUILD_NUMBER }}"
#          -PgooglePlayApiKey="../${{ steps.decode_api_key.outputs.filePath }}"
#          -PKEYSTORE_FILE="../${{ steps.decode_keystore.outputs.filePath }}"
#          -PKEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}
#          -PKEY_ALIAS=${{ secrets.KEY_ALIAS }}
#          -PKEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
#          publishBundle --max-workers 1
